@page "/"
@using System.Diagnostics;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle> Signal R chat</PageTitle>
<h3>Signal R chat</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username"
        @onkeyup="HandleConnectInput"
               class="form-control"
               placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
        @messages
    </textarea>

    <div class="input-group">
        <input @bind-value="message"
        @bind-value:event="oninput"
        @onkeyup="HandleSendInput"
               class="form-control">
        <button class="btn btn-primary form-group-append"
        @onclick="Send"
                disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            // "SendMessage" is from "ChatHub"
            await hubConnection.SendAsync("SendMessage", username, message);
            message = string.Empty;
        }
    }

    private async Task HandleConnectInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
            await Connect();
    }

    private async Task HandleSendInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
            await Send();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}